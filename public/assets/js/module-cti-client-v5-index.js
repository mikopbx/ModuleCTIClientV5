"use strict";

/*
 * MikoPBX - free phone system for small business
 * Copyright (C) 2017-2025 Alexey Portnov and Nikolay Beketov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 */
var moduleCTIClientV5 = {
  $statusToggle: $('#module-status-toggle'),
  $callerIdSetupToggle: $('#setup-caller-id-toggle'),
  $callerIdTransliterationToggleBlock: $('#transliterate-caller-id-toggle-block'),
  $formObj: $('#module-cti-client-form'),
  $moduleStatus: $('#status'),
  $debugToggle: $('#debug-mode-toggle'),
  $dirrtyField: $('#dirrty'),
  $debugTab: $('#module-cti-client-tabs .item[data-tab="debug"]'),
  $regenerateTokenBtn: $('#regenerate-token-btn'),
  $authTokenField: $('input[name="authorization_token"]'),
  validateRules: {},
  initialize: function initialize() {
    $('#module-cti-client-form .item').tab();

    if (moduleCTIClientV5.$debugToggle.checkbox('is unchecked')) {
      moduleCTIClientV5.$debugTab.hide();
    }

    moduleCTIClientV5.$debugToggle.checkbox({
      onChecked: function onChecked() {
        moduleCTIClientV5.$debugTab.show();
      },
      onUnchecked: function onUnchecked() {
        moduleCTIClientV5.$debugTab.hide();
      }
    });
    moduleCTIClientV5.$callerIdSetupToggle.checkbox({
      onChange: moduleCTIClientV5.setCallerIdToggle
    });
    moduleCTIClientV5.initializeForm();
    moduleCTIClientV5.checkStatusToggle();
    moduleCTIClientV5.setCallerIdToggle();
    moduleCTIClientV5.initRegenerateTokenButton();
    window.addEventListener('ModuleStatusChanged', moduleCTIClientV5.checkStatusToggle);
  },

  /**
   * Initialize regenerate token button click handler
   */
  initRegenerateTokenButton: function initRegenerateTokenButton() {
    moduleCTIClientV5.$regenerateTokenBtn.on('click', function (e) {
      e.preventDefault();
      $.api({
        url: "".concat(Config.pbxUrl, "/pbxcore/api/module-cti-client-v5/regenerateAuthorizationToken"),
        on: 'now',
        successTest: function successTest(response) {
          return response.result === true;
        },
        onSuccess: function onSuccess(response) {
          if (response.data && response.data.newToken) {
            moduleCTIClientV5.$formObj.form('set value', 'authorization_token', response.data.newToken);
            Form.dataChanged();
          }
        },
        onFailure: function onFailure(response) {
          UserMessage.showError(response.message);
        }
      });
    });
  },

  /**
   * Проверка состояния модуля
   */
  checkStatusToggle: function checkStatusToggle() {
    if (moduleCTIClientV5.$statusToggle.checkbox('is checked')) {
      $('.disability').removeClass('disabled');
      moduleCTIClientV5.$moduleStatus.show();
      moduleCTIClientV5ConnectionCheckWorker.initialize();
    } else {
      moduleCTIClientV5.$moduleStatus.hide();
      moduleCTIClientV5.$moduleStatus.hide();
      $('.disability').addClass('disabled');
      $('.message.ajax').remove();
    }
  },

  /**
   * Переключатель установки CallerID из 1С
   * Прячет или показывает статус транслитерации
   */
  setCallerIdToggle: function setCallerIdToggle() {
    if (moduleCTIClientV5.$callerIdSetupToggle.checkbox('is checked')) {
      moduleCTIClientV5.$callerIdTransliterationToggleBlock.show();
    } else {
      moduleCTIClientV5.$callerIdTransliterationToggleBlock.hide();
    }
  },
  cbBeforeSendForm: function cbBeforeSendForm(settings) {
    var result = settings;
    result.data = moduleCTIClientV5.$formObj.form('get values');
    return result;
  },
  cbAfterSendForm: function cbAfterSendForm() {
    setTimeout(function () {
      moduleCTIClientV5ConnectionCheckWorker.initialize();
    }, 5000);
  },
  initializeForm: function initializeForm() {
    Form.$formObj = moduleCTIClientV5.$formObj;
    Form.url = "".concat(globalRootUrl, "module-c-t-i-client-v5/save");
    Form.validateRules = moduleCTIClientV5.validateRules;
    Form.cbBeforeSendForm = moduleCTIClientV5.cbBeforeSendForm;
    Form.cbAfterSendForm = moduleCTIClientV5.cbAfterSendForm;
    Form.initialize();
  }
};
$(document).ready(function () {
  moduleCTIClientV5.initialize();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGUtY3RpLWNsaWVudC12NS1pbmRleC5qcyJdLCJuYW1lcyI6WyJtb2R1bGVDVElDbGllbnRWNSIsIiRzdGF0dXNUb2dnbGUiLCIkIiwiJGNhbGxlcklkU2V0dXBUb2dnbGUiLCIkY2FsbGVySWRUcmFuc2xpdGVyYXRpb25Ub2dnbGVCbG9jayIsIiRmb3JtT2JqIiwiJG1vZHVsZVN0YXR1cyIsIiRkZWJ1Z1RvZ2dsZSIsIiRkaXJydHlGaWVsZCIsIiRkZWJ1Z1RhYiIsIiRyZWdlbmVyYXRlVG9rZW5CdG4iLCIkYXV0aFRva2VuRmllbGQiLCJ2YWxpZGF0ZVJ1bGVzIiwiaW5pdGlhbGl6ZSIsInRhYiIsImNoZWNrYm94IiwiaGlkZSIsIm9uQ2hlY2tlZCIsInNob3ciLCJvblVuY2hlY2tlZCIsIm9uQ2hhbmdlIiwic2V0Q2FsbGVySWRUb2dnbGUiLCJpbml0aWFsaXplRm9ybSIsImNoZWNrU3RhdHVzVG9nZ2xlIiwiaW5pdFJlZ2VuZXJhdGVUb2tlbkJ1dHRvbiIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImFwaSIsInVybCIsIkNvbmZpZyIsInBieFVybCIsInN1Y2Nlc3NUZXN0IiwicmVzcG9uc2UiLCJyZXN1bHQiLCJvblN1Y2Nlc3MiLCJkYXRhIiwibmV3VG9rZW4iLCJmb3JtIiwiRm9ybSIsImRhdGFDaGFuZ2VkIiwib25GYWlsdXJlIiwiVXNlck1lc3NhZ2UiLCJzaG93RXJyb3IiLCJtZXNzYWdlIiwicmVtb3ZlQ2xhc3MiLCJtb2R1bGVDVElDbGllbnRWNUNvbm5lY3Rpb25DaGVja1dvcmtlciIsImFkZENsYXNzIiwicmVtb3ZlIiwiY2JCZWZvcmVTZW5kRm9ybSIsInNldHRpbmdzIiwiY2JBZnRlclNlbmRGb3JtIiwic2V0VGltZW91dCIsImdsb2JhbFJvb3RVcmwiLCJkb2N1bWVudCIsInJlYWR5Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxJQUFNQSxpQkFBaUIsR0FBRztBQUN6QkMsRUFBQUEsYUFBYSxFQUFFQyxDQUFDLENBQUMsdUJBQUQsQ0FEUztBQUV6QkMsRUFBQUEsb0JBQW9CLEVBQUVELENBQUMsQ0FBQyx5QkFBRCxDQUZFO0FBR3pCRSxFQUFBQSxtQ0FBbUMsRUFBRUYsQ0FBQyxDQUFDLHVDQUFELENBSGI7QUFJekJHLEVBQUFBLFFBQVEsRUFBRUgsQ0FBQyxDQUFDLHlCQUFELENBSmM7QUFLekJJLEVBQUFBLGFBQWEsRUFBRUosQ0FBQyxDQUFDLFNBQUQsQ0FMUztBQU16QkssRUFBQUEsWUFBWSxFQUFFTCxDQUFDLENBQUMsb0JBQUQsQ0FOVTtBQU96Qk0sRUFBQUEsWUFBWSxFQUFFTixDQUFDLENBQUMsU0FBRCxDQVBVO0FBUXpCTyxFQUFBQSxTQUFTLEVBQUVQLENBQUMsQ0FBQyxpREFBRCxDQVJhO0FBU3pCUSxFQUFBQSxtQkFBbUIsRUFBRVIsQ0FBQyxDQUFDLHVCQUFELENBVEc7QUFVekJTLEVBQUFBLGVBQWUsRUFBRVQsQ0FBQyxDQUFDLG1DQUFELENBVk87QUFXekJVLEVBQUFBLGFBQWEsRUFBRSxFQVhVO0FBYXpCQyxFQUFBQSxVQWJ5Qix3QkFhWjtBQUNaWCxJQUFBQSxDQUFDLENBQUMsK0JBQUQsQ0FBRCxDQUFtQ1ksR0FBbkM7O0FBQ0EsUUFBSWQsaUJBQWlCLENBQUNPLFlBQWxCLENBQStCUSxRQUEvQixDQUF3QyxjQUF4QyxDQUFKLEVBQTREO0FBQzNEZixNQUFBQSxpQkFBaUIsQ0FBQ1MsU0FBbEIsQ0FBNEJPLElBQTVCO0FBQ0E7O0FBQ0RoQixJQUFBQSxpQkFBaUIsQ0FBQ08sWUFBbEIsQ0FDRVEsUUFERixDQUNXO0FBQ1RFLE1BQUFBLFNBRFMsdUJBQ0c7QUFDWGpCLFFBQUFBLGlCQUFpQixDQUFDUyxTQUFsQixDQUE0QlMsSUFBNUI7QUFDQSxPQUhRO0FBSVRDLE1BQUFBLFdBSlMseUJBSUs7QUFDYm5CLFFBQUFBLGlCQUFpQixDQUFDUyxTQUFsQixDQUE0Qk8sSUFBNUI7QUFDQTtBQU5RLEtBRFg7QUFXQWhCLElBQUFBLGlCQUFpQixDQUFDRyxvQkFBbEIsQ0FDRVksUUFERixDQUNXO0FBQ1RLLE1BQUFBLFFBQVEsRUFBRXBCLGlCQUFpQixDQUFDcUI7QUFEbkIsS0FEWDtBQU1BckIsSUFBQUEsaUJBQWlCLENBQUNzQixjQUFsQjtBQUNBdEIsSUFBQUEsaUJBQWlCLENBQUN1QixpQkFBbEI7QUFDQXZCLElBQUFBLGlCQUFpQixDQUFDcUIsaUJBQWxCO0FBQ0FyQixJQUFBQSxpQkFBaUIsQ0FBQ3dCLHlCQUFsQjtBQUNBQyxJQUFBQSxNQUFNLENBQUNDLGdCQUFQLENBQXdCLHFCQUF4QixFQUErQzFCLGlCQUFpQixDQUFDdUIsaUJBQWpFO0FBQ0EsR0F4Q3dCOztBQXlDekI7QUFDRDtBQUNBO0FBQ0NDLEVBQUFBLHlCQTVDeUIsdUNBNENHO0FBQzNCeEIsSUFBQUEsaUJBQWlCLENBQUNVLG1CQUFsQixDQUFzQ2lCLEVBQXRDLENBQXlDLE9BQXpDLEVBQWtELFVBQUNDLENBQUQsRUFBTztBQUN4REEsTUFBQUEsQ0FBQyxDQUFDQyxjQUFGO0FBQ0EzQixNQUFBQSxDQUFDLENBQUM0QixHQUFGLENBQU07QUFDTEMsUUFBQUEsR0FBRyxZQUFLQyxNQUFNLENBQUNDLE1BQVosbUVBREU7QUFFTE4sUUFBQUEsRUFBRSxFQUFFLEtBRkM7QUFHTE8sUUFBQUEsV0FISyx1QkFHT0MsUUFIUCxFQUdpQjtBQUNyQixpQkFBT0EsUUFBUSxDQUFDQyxNQUFULEtBQW9CLElBQTNCO0FBQ0EsU0FMSTtBQU1MQyxRQUFBQSxTQU5LLHFCQU1LRixRQU5MLEVBTWU7QUFDbkIsY0FBSUEsUUFBUSxDQUFDRyxJQUFULElBQWlCSCxRQUFRLENBQUNHLElBQVQsQ0FBY0MsUUFBbkMsRUFBNkM7QUFDNUN2QyxZQUFBQSxpQkFBaUIsQ0FBQ0ssUUFBbEIsQ0FBMkJtQyxJQUEzQixDQUFnQyxXQUFoQyxFQUE2QyxxQkFBN0MsRUFBb0VMLFFBQVEsQ0FBQ0csSUFBVCxDQUFjQyxRQUFsRjtBQUNBRSxZQUFBQSxJQUFJLENBQUNDLFdBQUw7QUFDQTtBQUNELFNBWEk7QUFZTEMsUUFBQUEsU0FaSyxxQkFZS1IsUUFaTCxFQVllO0FBQ25CUyxVQUFBQSxXQUFXLENBQUNDLFNBQVosQ0FBc0JWLFFBQVEsQ0FBQ1csT0FBL0I7QUFDQTtBQWRJLE9BQU47QUFnQkEsS0FsQkQ7QUFtQkEsR0FoRXdCOztBQWlFekI7QUFDRDtBQUNBO0FBQ0N2QixFQUFBQSxpQkFwRXlCLCtCQW9FTDtBQUNuQixRQUFJdkIsaUJBQWlCLENBQUNDLGFBQWxCLENBQWdDYyxRQUFoQyxDQUF5QyxZQUF6QyxDQUFKLEVBQTREO0FBQzNEYixNQUFBQSxDQUFDLENBQUMsYUFBRCxDQUFELENBQWlCNkMsV0FBakIsQ0FBNkIsVUFBN0I7QUFDQS9DLE1BQUFBLGlCQUFpQixDQUFDTSxhQUFsQixDQUFnQ1ksSUFBaEM7QUFDQThCLE1BQUFBLHNDQUFzQyxDQUFDbkMsVUFBdkM7QUFDQSxLQUpELE1BSU87QUFDTmIsTUFBQUEsaUJBQWlCLENBQUNNLGFBQWxCLENBQWdDVSxJQUFoQztBQUNBaEIsTUFBQUEsaUJBQWlCLENBQUNNLGFBQWxCLENBQWdDVSxJQUFoQztBQUNBZCxNQUFBQSxDQUFDLENBQUMsYUFBRCxDQUFELENBQWlCK0MsUUFBakIsQ0FBMEIsVUFBMUI7QUFDQS9DLE1BQUFBLENBQUMsQ0FBQyxlQUFELENBQUQsQ0FBbUJnRCxNQUFuQjtBQUNBO0FBQ0QsR0EvRXdCOztBQWdGekI7QUFDRDtBQUNBO0FBQ0E7QUFDQzdCLEVBQUFBLGlCQXBGeUIsK0JBb0ZMO0FBQ25CLFFBQUlyQixpQkFBaUIsQ0FBQ0csb0JBQWxCLENBQXVDWSxRQUF2QyxDQUFnRCxZQUFoRCxDQUFKLEVBQW1FO0FBQ2xFZixNQUFBQSxpQkFBaUIsQ0FBQ0ksbUNBQWxCLENBQXNEYyxJQUF0RDtBQUNBLEtBRkQsTUFFTztBQUNObEIsTUFBQUEsaUJBQWlCLENBQUNJLG1DQUFsQixDQUFzRFksSUFBdEQ7QUFDQTtBQUNELEdBMUZ3QjtBQTJGekJtQyxFQUFBQSxnQkEzRnlCLDRCQTJGUkMsUUEzRlEsRUEyRkU7QUFDMUIsUUFBTWhCLE1BQU0sR0FBR2dCLFFBQWY7QUFDQWhCLElBQUFBLE1BQU0sQ0FBQ0UsSUFBUCxHQUFjdEMsaUJBQWlCLENBQUNLLFFBQWxCLENBQTJCbUMsSUFBM0IsQ0FBZ0MsWUFBaEMsQ0FBZDtBQUNBLFdBQU9KLE1BQVA7QUFDQSxHQS9Gd0I7QUFnR3pCaUIsRUFBQUEsZUFoR3lCLDZCQWdHUDtBQUNqQkMsSUFBQUEsVUFBVSxDQUFDLFlBQU07QUFDaEJOLE1BQUFBLHNDQUFzQyxDQUFDbkMsVUFBdkM7QUFDQSxLQUZTLEVBRVAsSUFGTyxDQUFWO0FBR0EsR0FwR3dCO0FBcUd6QlMsRUFBQUEsY0FyR3lCLDRCQXFHUjtBQUNoQm1CLElBQUFBLElBQUksQ0FBQ3BDLFFBQUwsR0FBZ0JMLGlCQUFpQixDQUFDSyxRQUFsQztBQUNBb0MsSUFBQUEsSUFBSSxDQUFDVixHQUFMLGFBQWN3QixhQUFkO0FBQ0FkLElBQUFBLElBQUksQ0FBQzdCLGFBQUwsR0FBcUJaLGlCQUFpQixDQUFDWSxhQUF2QztBQUNBNkIsSUFBQUEsSUFBSSxDQUFDVSxnQkFBTCxHQUF3Qm5ELGlCQUFpQixDQUFDbUQsZ0JBQTFDO0FBQ0FWLElBQUFBLElBQUksQ0FBQ1ksZUFBTCxHQUF1QnJELGlCQUFpQixDQUFDcUQsZUFBekM7QUFDQVosSUFBQUEsSUFBSSxDQUFDNUIsVUFBTDtBQUNBO0FBNUd3QixDQUExQjtBQStHQVgsQ0FBQyxDQUFDc0QsUUFBRCxDQUFELENBQVlDLEtBQVosQ0FBa0IsWUFBTTtBQUN2QnpELEVBQUFBLGlCQUFpQixDQUFDYSxVQUFsQjtBQUNBLENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWlrb1BCWCAtIGZyZWUgcGhvbmUgc3lzdGVtIGZvciBzbWFsbCBidXNpbmVzc1xuICogQ29weXJpZ2h0IChDKSAyMDE3LTIwMjUgQWxleGV5IFBvcnRub3YgYW5kIE5pa29sYXkgQmVrZXRvdlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS5cbiAqIElmIG5vdCwgc2VlIDxodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cblxuY29uc3QgbW9kdWxlQ1RJQ2xpZW50VjUgPSB7XG5cdCRzdGF0dXNUb2dnbGU6ICQoJyNtb2R1bGUtc3RhdHVzLXRvZ2dsZScpLFxuXHQkY2FsbGVySWRTZXR1cFRvZ2dsZTogJCgnI3NldHVwLWNhbGxlci1pZC10b2dnbGUnKSxcblx0JGNhbGxlcklkVHJhbnNsaXRlcmF0aW9uVG9nZ2xlQmxvY2s6ICQoJyN0cmFuc2xpdGVyYXRlLWNhbGxlci1pZC10b2dnbGUtYmxvY2snKSxcblx0JGZvcm1PYmo6ICQoJyNtb2R1bGUtY3RpLWNsaWVudC1mb3JtJyksXG5cdCRtb2R1bGVTdGF0dXM6ICQoJyNzdGF0dXMnKSxcblx0JGRlYnVnVG9nZ2xlOiAkKCcjZGVidWctbW9kZS10b2dnbGUnKSxcblx0JGRpcnJ0eUZpZWxkOiAkKCcjZGlycnR5JyksXG5cdCRkZWJ1Z1RhYjogJCgnI21vZHVsZS1jdGktY2xpZW50LXRhYnMgLml0ZW1bZGF0YS10YWI9XCJkZWJ1Z1wiXScpLFxuXHQkcmVnZW5lcmF0ZVRva2VuQnRuOiAkKCcjcmVnZW5lcmF0ZS10b2tlbi1idG4nKSxcblx0JGF1dGhUb2tlbkZpZWxkOiAkKCdpbnB1dFtuYW1lPVwiYXV0aG9yaXphdGlvbl90b2tlblwiXScpLFxuXHR2YWxpZGF0ZVJ1bGVzOiB7XG5cdH0sXG5cdGluaXRpYWxpemUoKSB7XG5cdFx0JCgnI21vZHVsZS1jdGktY2xpZW50LWZvcm0gLml0ZW0nKS50YWIoKTtcblx0XHRpZiAobW9kdWxlQ1RJQ2xpZW50VjUuJGRlYnVnVG9nZ2xlLmNoZWNrYm94KCdpcyB1bmNoZWNrZWQnKSl7XG5cdFx0XHRtb2R1bGVDVElDbGllbnRWNS4kZGVidWdUYWIuaGlkZSgpXG5cdFx0fVxuXHRcdG1vZHVsZUNUSUNsaWVudFY1LiRkZWJ1Z1RvZ2dsZVxuXHRcdFx0LmNoZWNrYm94KHtcblx0XHRcdFx0b25DaGVja2VkKCkge1xuXHRcdFx0XHRcdG1vZHVsZUNUSUNsaWVudFY1LiRkZWJ1Z1RhYi5zaG93KClcblx0XHRcdFx0fSxcblx0XHRcdFx0b25VbmNoZWNrZWQoKSB7XG5cdFx0XHRcdFx0bW9kdWxlQ1RJQ2xpZW50VjUuJGRlYnVnVGFiLmhpZGUoKVxuXHRcdFx0XHR9LFxuXHRcdFx0fSk7XG5cblxuXHRcdG1vZHVsZUNUSUNsaWVudFY1LiRjYWxsZXJJZFNldHVwVG9nZ2xlXG5cdFx0XHQuY2hlY2tib3goe1xuXHRcdFx0XHRvbkNoYW5nZTogbW9kdWxlQ1RJQ2xpZW50VjUuc2V0Q2FsbGVySWRUb2dnbGVcblx0XHRcdH0pO1xuXG5cblx0XHRtb2R1bGVDVElDbGllbnRWNS5pbml0aWFsaXplRm9ybSgpO1xuXHRcdG1vZHVsZUNUSUNsaWVudFY1LmNoZWNrU3RhdHVzVG9nZ2xlKCk7XG5cdFx0bW9kdWxlQ1RJQ2xpZW50VjUuc2V0Q2FsbGVySWRUb2dnbGUoKTtcblx0XHRtb2R1bGVDVElDbGllbnRWNS5pbml0UmVnZW5lcmF0ZVRva2VuQnV0dG9uKCk7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ01vZHVsZVN0YXR1c0NoYW5nZWQnLCBtb2R1bGVDVElDbGllbnRWNS5jaGVja1N0YXR1c1RvZ2dsZSk7XG5cdH0sXG5cdC8qKlxuXHQgKiBJbml0aWFsaXplIHJlZ2VuZXJhdGUgdG9rZW4gYnV0dG9uIGNsaWNrIGhhbmRsZXJcblx0ICovXG5cdGluaXRSZWdlbmVyYXRlVG9rZW5CdXR0b24oKSB7XG5cdFx0bW9kdWxlQ1RJQ2xpZW50VjUuJHJlZ2VuZXJhdGVUb2tlbkJ0bi5vbignY2xpY2snLCAoZSkgPT4ge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0JC5hcGkoe1xuXHRcdFx0XHR1cmw6IGAke0NvbmZpZy5wYnhVcmx9L3BieGNvcmUvYXBpL21vZHVsZS1jdGktY2xpZW50LXY1L3JlZ2VuZXJhdGVBdXRob3JpemF0aW9uVG9rZW5gLFxuXHRcdFx0XHRvbjogJ25vdycsXG5cdFx0XHRcdHN1Y2Nlc3NUZXN0KHJlc3BvbnNlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLnJlc3VsdCA9PT0gdHJ1ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0b25TdWNjZXNzKHJlc3BvbnNlKSB7XG5cdFx0XHRcdFx0aWYgKHJlc3BvbnNlLmRhdGEgJiYgcmVzcG9uc2UuZGF0YS5uZXdUb2tlbikge1xuXHRcdFx0XHRcdFx0bW9kdWxlQ1RJQ2xpZW50VjUuJGZvcm1PYmouZm9ybSgnc2V0IHZhbHVlJywgJ2F1dGhvcml6YXRpb25fdG9rZW4nLCByZXNwb25zZS5kYXRhLm5ld1Rva2VuKTtcdFxuXHRcdFx0XHRcdFx0Rm9ybS5kYXRhQ2hhbmdlZCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0b25GYWlsdXJlKHJlc3BvbnNlKSB7XG5cdFx0XHRcdFx0VXNlck1lc3NhZ2Uuc2hvd0Vycm9yKHJlc3BvbnNlLm1lc3NhZ2UpO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH0sXG5cdC8qKlxuXHQgKiDQn9GA0L7QstC10YDQutCwINGB0L7RgdGC0L7Rj9C90LjRjyDQvNC+0LTRg9C70Y9cblx0ICovXG5cdGNoZWNrU3RhdHVzVG9nZ2xlKCkge1xuXHRcdGlmIChtb2R1bGVDVElDbGllbnRWNS4kc3RhdHVzVG9nZ2xlLmNoZWNrYm94KCdpcyBjaGVja2VkJykpIHtcblx0XHRcdCQoJy5kaXNhYmlsaXR5JykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cdFx0XHRtb2R1bGVDVElDbGllbnRWNS4kbW9kdWxlU3RhdHVzLnNob3coKTtcblx0XHRcdG1vZHVsZUNUSUNsaWVudFY1Q29ubmVjdGlvbkNoZWNrV29ya2VyLmluaXRpYWxpemUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bW9kdWxlQ1RJQ2xpZW50VjUuJG1vZHVsZVN0YXR1cy5oaWRlKCk7XG5cdFx0XHRtb2R1bGVDVElDbGllbnRWNS4kbW9kdWxlU3RhdHVzLmhpZGUoKTtcblx0XHRcdCQoJy5kaXNhYmlsaXR5JykuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG5cdFx0XHQkKCcubWVzc2FnZS5hamF4JykucmVtb3ZlKCk7XG5cdFx0fVxuXHR9LFxuXHQvKipcblx0ICog0J/QtdGA0LXQutC70Y7Rh9Cw0YLQtdC70Ywg0YPRgdGC0LDQvdC+0LLQutC4IENhbGxlcklEINC40LcgMdChXG5cdCAqINCf0YDRj9GH0LXRgiDQuNC70Lgg0L/QvtC60LDQt9GL0LLQsNC10YIg0YHRgtCw0YLRg9GBINGC0YDQsNC90YHQu9C40YLQtdGA0LDRhtC40Lhcblx0ICovXG5cdHNldENhbGxlcklkVG9nZ2xlKCkge1xuXHRcdGlmIChtb2R1bGVDVElDbGllbnRWNS4kY2FsbGVySWRTZXR1cFRvZ2dsZS5jaGVja2JveCgnaXMgY2hlY2tlZCcpKSB7XG5cdFx0XHRtb2R1bGVDVElDbGllbnRWNS4kY2FsbGVySWRUcmFuc2xpdGVyYXRpb25Ub2dnbGVCbG9jay5zaG93KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1vZHVsZUNUSUNsaWVudFY1LiRjYWxsZXJJZFRyYW5zbGl0ZXJhdGlvblRvZ2dsZUJsb2NrLmhpZGUoKTtcblx0XHR9XG5cdH0sXG5cdGNiQmVmb3JlU2VuZEZvcm0oc2V0dGluZ3MpIHtcblx0XHRjb25zdCByZXN1bHQgPSBzZXR0aW5ncztcblx0XHRyZXN1bHQuZGF0YSA9IG1vZHVsZUNUSUNsaWVudFY1LiRmb3JtT2JqLmZvcm0oJ2dldCB2YWx1ZXMnKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9LFxuXHRjYkFmdGVyU2VuZEZvcm0oKSB7XG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRtb2R1bGVDVElDbGllbnRWNUNvbm5lY3Rpb25DaGVja1dvcmtlci5pbml0aWFsaXplKCk7XG5cdFx0fSwgNTAwMCk7XG5cdH0sXG5cdGluaXRpYWxpemVGb3JtKCkge1xuXHRcdEZvcm0uJGZvcm1PYmogPSBtb2R1bGVDVElDbGllbnRWNS4kZm9ybU9iajtcblx0XHRGb3JtLnVybCA9IGAke2dsb2JhbFJvb3RVcmx9bW9kdWxlLWMtdC1pLWNsaWVudC12NS9zYXZlYDtcblx0XHRGb3JtLnZhbGlkYXRlUnVsZXMgPSBtb2R1bGVDVElDbGllbnRWNS52YWxpZGF0ZVJ1bGVzO1xuXHRcdEZvcm0uY2JCZWZvcmVTZW5kRm9ybSA9IG1vZHVsZUNUSUNsaWVudFY1LmNiQmVmb3JlU2VuZEZvcm07XG5cdFx0Rm9ybS5jYkFmdGVyU2VuZEZvcm0gPSBtb2R1bGVDVElDbGllbnRWNS5jYkFmdGVyU2VuZEZvcm07XG5cdFx0Rm9ybS5pbml0aWFsaXplKCk7XG5cdH0sXG59O1xuXG4kKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XG5cdG1vZHVsZUNUSUNsaWVudFY1LmluaXRpYWxpemUoKTtcbn0pO1xuXG4iXX0=